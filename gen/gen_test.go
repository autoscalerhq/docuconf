package gen

import (
	"github.com/stretchr/testify/require"
	"path/filepath"
	"testing"
)

func TestMyConfCompleteOutput(t *testing.T) {
	service := NewService("My Endpoint", "my_endpoint", filepath.Join("output", "config"), AdditionalOptions{}).
		AddString("SomeField", "Some Description", false, "")
	//	result, err := service.execute()
	//	require.Nil(t, err)
	//	expected := `// Code generated by docuconf. DO NOT EDIT.
	//package configuration
	//
	//type Configuration struct {
	//  SomeField string // Some Description
	//}
	//`
	//goCodeFile := result.GoFiles[0]
	//markDownFile := result.MarkDownFiles[0]
	//require.Equal(t, expected, goCodeFile.Content)
	require.Nil(t, service.Write())
}

func TestSharedConfigWithMultipleServices(t *testing.T) {

	sharedConfig := NewConfBuilder().
		AddString("SharedField", "Shared Description", false, "A default value").
		AddBool("SharedBool", "Shared Bool Description", false, false).
		AddInt("SharedInt", "Shared Int Description", false, 0).
		AddFloat("SharedFloat", "Shared Float Description", false, "0.0")

	service1 := NewService("Service 1", "service1", filepath.Join("output", "service1"), AdditionalOptions{}).
		AddString("Service1Field", "Service 1 Description", false, "").
		AddShared(sharedConfig)

	service2 := NewService("Service 2", "service2", filepath.Join("output", "service2"), AdditionalOptions{}).
		AddString("Service2Field", "Service 2 Description", false, "").
		AddShared(sharedConfig)

	require.Nil(t, WriteAll([]*Service{service1, service2}))
}

func TestAddStringNotEnoughDescription(t *testing.T) {

	require.PanicsWithErrorf(t, "AddString(SomeField, ) Failed: description must be at least 5 characters long. This is to ensure your configuration is well documented", func() {
		NewService("My Endpoint", "my_endpoint", "configuration", AdditionalOptions{}).AddString("SomeField", "", false, "")
	}, "The code did not panic with the correct message")
}
